{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/kanu/Desktop/MHIRJTEST/mhirjWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Match all characters that need to be escaped in a string. Modified from\n * source to match single quotes instead of double.\n *\n * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n */\n\nvar ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n/**\n * Map of characters to escape characters.\n */\n\nvar META_CHARS = new Map([[\"\\b\", \"\\\\b\"], [\"\\t\", \"\\\\t\"], [\"\\n\", \"\\\\n\"], [\"\\f\", \"\\\\f\"], [\"\\r\", \"\\\\r\"], [\"'\", \"\\\\'\"], ['\"', '\\\\\"'], [\"\\\\\", \"\\\\\\\\\"]]);\n/**\n * Escape any character into its literal JavaScript string.\n *\n * @param  {string} char\n * @return {string}\n */\n\nfunction escapeChar(char) {\n  return META_CHARS.get(char) || \"\\\\u\".concat(\"0000\".concat(char.charCodeAt(0).toString(16)).slice(-4));\n}\n/**\n * Quote a string.\n */\n\n\nfunction quoteString(str) {\n  return \"'\".concat(str.replace(ESCAPABLE, escapeChar), \"'\");\n}\n\nexports.quoteString = quoteString;\n/**\n * JavaScript reserved keywords.\n */\n\nvar RESERVED_WORDS = new Set((\"break else new var case finally return void catch for switch while \" + \"continue function this with default if throw delete in try \" + \"do instanceof typeof abstract enum int short boolean export \" + \"interface static byte extends long super char final native synchronized \" + \"class float package throws const goto private transient debugger \" + \"implements protected volatile double import public let yield\").split(\" \"));\n/**\n * Test for valid JavaScript identifier.\n */\n\nexports.IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n/**\n * Check if a variable name is valid.\n */\n\nfunction isValidVariableName(name) {\n  return typeof name === \"string\" && !RESERVED_WORDS.has(name) && exports.IS_VALID_IDENTIFIER.test(name);\n}\n\nexports.isValidVariableName = isValidVariableName;\n/**\n * Quote JavaScript key access.\n */\n\nfunction quoteKey(key, next) {\n  return isValidVariableName(key) ? key : next(key);\n}\n\nexports.quoteKey = quoteKey;\n/**\n * Serialize the path to a string.\n */\n\nfunction stringifyPath(path, next) {\n  var result = \"\";\n\n  var _iterator = _createForOfIteratorHelper(path),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n\n      if (isValidVariableName(key)) {\n        result += \".\".concat(key);\n      } else {\n        result += \"[\".concat(next(key), \"]\");\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nexports.stringifyPath = stringifyPath;","map":{"version":3,"sources":["../src/quote.ts"],"names":[],"mappings":";;;;;;;AAEA;;;;;AAKG;;AACH,IAAM,SAAS,GAAG,0HAAlB;AAEA;;AAEG;;AACH,IAAM,UAAU,GAAG,IAAI,GAAJ,CAAwB,CACzC,CAAC,IAAD,EAAO,KAAP,CADyC,EAEzC,CAAC,IAAD,EAAO,KAAP,CAFyC,EAGzC,CAAC,IAAD,EAAO,KAAP,CAHyC,EAIzC,CAAC,IAAD,EAAO,KAAP,CAJyC,EAKzC,CAAC,IAAD,EAAO,KAAP,CALyC,EAMzC,CAAC,GAAD,EAAM,KAAN,CANyC,EAOzC,CAAC,GAAD,EAAM,KAAN,CAPyC,EAQzC,CAAC,IAAD,EAAO,MAAP,CARyC,CAAxB,CAAnB;AAWA;;;;;AAKG;;AACH,SAAS,UAAT,CAAoB,IAApB,EAAgC;AAC9B,SACE,UAAU,CAAC,GAAX,CAAe,IAAf,kBACM,cAAO,IAAI,CAAC,UAAL,CAAgB,CAAhB,EAAmB,QAAnB,CAA4B,EAA5B,CAAP,EAAyC,KAAzC,CAA+C,CAAC,CAAhD,CADN,CADF;AAID;AAED;;AAEG;;;AACH,SAAgB,WAAhB,CAA4B,GAA5B,EAAuC;AACrC,oBAAW,GAAG,CAAC,OAAJ,CAAY,SAAZ,EAAuB,UAAvB,CAAX;AACD;;AAFD,OAAA,CAAA,WAAA,GAAA,WAAA;AAIA;;AAEG;;AACH,IAAM,cAAc,GAAG,IAAI,GAAJ,CACrB,CACE,wEACA,6DADA,GAEA,8DAFA,GAGA,0EAHA,GAIA,mEAJA,GAKA,8DANF,EAOE,KAPF,CAOQ,GAPR,CADqB,CAAvB;AAWA;;AAEG;;AACU,OAAA,CAAA,mBAAA,GAAsB,4BAAtB;AAEb;;AAEG;;AACH,SAAgB,mBAAhB,CAAoC,IAApC,EAAqD;AACnD,SACE,OAAO,IAAP,KAAgB,QAAhB,IACA,CAAC,cAAc,CAAC,GAAf,CAAmB,IAAnB,CADD,IAEA,OAAA,CAAA,mBAAA,CAAoB,IAApB,CAAyB,IAAzB,CAHF;AAKD;;AAND,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAQA;;AAEG;;AACH,SAAgB,QAAhB,CAAyB,GAAzB,EAA2C,IAA3C,EAAqD;AACnD,SAAO,mBAAmB,CAAC,GAAD,CAAnB,GAA2B,GAA3B,GAAiC,IAAI,CAAC,GAAD,CAA5C;AACD;;AAFD,OAAA,CAAA,QAAA,GAAA,QAAA;AAIA;;AAEG;;AACH,SAAgB,aAAhB,CAA8B,IAA9B,EAAmD,IAAnD,EAA6D;AAC3D,MAAI,MAAM,GAAG,EAAb;;AAD2D,6CAGzC,IAHyC;AAAA;;AAAA;AAG3D,wDAAwB;AAAA,UAAb,GAAa;;AACtB,UAAI,mBAAmB,CAAC,GAAD,CAAvB,EAA8B;AAC5B,QAAA,MAAM,eAAQ,GAAR,CAAN;AACD,OAFD,MAEO;AACL,QAAA,MAAM,eAAQ,IAAI,CAAC,GAAD,CAAZ,MAAN;AACD;AACF;AAT0D;AAAA;AAAA;AAAA;AAAA;;AAW3D,SAAO,MAAP;AACD;;AAZD,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["import { Next } from \"./types\";\n\n/**\n * Match all characters that need to be escaped in a string. Modified from\n * source to match single quotes instead of double.\n *\n * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n */\nconst ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n/**\n * Map of characters to escape characters.\n */\nconst META_CHARS = new Map<string, string>([\n  [\"\\b\", \"\\\\b\"],\n  [\"\\t\", \"\\\\t\"],\n  [\"\\n\", \"\\\\n\"],\n  [\"\\f\", \"\\\\f\"],\n  [\"\\r\", \"\\\\r\"],\n  [\"'\", \"\\\\'\"],\n  ['\"', '\\\\\"'],\n  [\"\\\\\", \"\\\\\\\\\"]\n]);\n\n/**\n * Escape any character into its literal JavaScript string.\n *\n * @param  {string} char\n * @return {string}\n */\nfunction escapeChar(char: string) {\n  return (\n    META_CHARS.get(char) ||\n    `\\\\u${`0000${char.charCodeAt(0).toString(16)}`.slice(-4)}`\n  );\n}\n\n/**\n * Quote a string.\n */\nexport function quoteString(str: string) {\n  return `'${str.replace(ESCAPABLE, escapeChar)}'`;\n}\n\n/**\n * JavaScript reserved keywords.\n */\nconst RESERVED_WORDS = new Set(\n  (\n    \"break else new var case finally return void catch for switch while \" +\n    \"continue function this with default if throw delete in try \" +\n    \"do instanceof typeof abstract enum int short boolean export \" +\n    \"interface static byte extends long super char final native synchronized \" +\n    \"class float package throws const goto private transient debugger \" +\n    \"implements protected volatile double import public let yield\"\n  ).split(\" \")\n);\n\n/**\n * Test for valid JavaScript identifier.\n */\nexport const IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n\n/**\n * Check if a variable name is valid.\n */\nexport function isValidVariableName(name: PropertyKey): name is string {\n  return (\n    typeof name === \"string\" &&\n    !RESERVED_WORDS.has(name) &&\n    IS_VALID_IDENTIFIER.test(name)\n  );\n}\n\n/**\n * Quote JavaScript key access.\n */\nexport function quoteKey(key: PropertyKey, next: Next) {\n  return isValidVariableName(key) ? key : next(key);\n}\n\n/**\n * Serialize the path to a string.\n */\nexport function stringifyPath(path: PropertyKey[], next: Next) {\n  let result = \"\";\n\n  for (const key of path) {\n    if (isValidVariableName(key)) {\n      result += `.${key}`;\n    } else {\n      result += `[${next(key)}]`;\n    }\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}