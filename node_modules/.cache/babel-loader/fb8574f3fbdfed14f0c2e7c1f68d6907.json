{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst quote_1 = require(\"./quote\");\n\nconst object_1 = require(\"./object\");\n\nconst function_1 = require(\"./function\");\n/**\n * Stringify primitive values.\n */\n\n\nconst PRIMITIVE_TYPES = {\n  string: quote_1.quoteString,\n  number: value => Object.is(value, -0) ? \"-0\" : String(value),\n  boolean: String,\n  symbol: (value, space, next) => {\n    const key = Symbol.keyFor(value);\n    if (key !== undefined) return `Symbol.for(${next(key)})`; // ES2018 `Symbol.description`.\n\n    return `Symbol(${next(value.description)})`;\n  },\n  bigint: (value, space, next) => {\n    return `BigInt(${next(String(value))})`;\n  },\n  undefined: String,\n  object: object_1.objectToString,\n  function: function_1.functionToString\n};\n/**\n * Stringify a value recursively.\n */\n\nexports.toString = (value, space, next, key) => {\n  if (value === null) return \"null\";\n  return PRIMITIVE_TYPES[typeof value](value, space, next, key);\n};","map":{"version":3,"sources":["../src/stringify.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAM,eAAe,GAA6B;AAChD,EAAA,MAAM,EAAE,OAAA,CAAA,WADwC;AAEhD,EAAA,MAAM,EAAG,KAAD,IAAoB,MAAM,CAAC,EAAP,CAAU,KAAV,EAAiB,CAAC,CAAlB,IAAuB,IAAvB,GAA8B,MAAM,CAAC,KAAD,CAFhB;AAGhD,EAAA,OAAO,EAAE,MAHuC;AAIhD,EAAA,MAAM,EAAE,CAAC,KAAD,EAAgB,KAAhB,EAA+B,IAA/B,KAA6C;AACnD,UAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,KAAd,CAAZ;AAEA,QAAI,GAAG,KAAK,SAAZ,EAAuB,OAAO,cAAc,IAAI,CAAC,GAAD,CAAK,GAA9B,CAH4B,CAKnD;;AACA,WAAO,UAAU,IAAI,CAAE,KAAa,CAAC,WAAhB,CAA4B,GAAjD;AACD,GAX+C;AAYhD,EAAA,MAAM,EAAE,CAAC,KAAD,EAAgB,KAAhB,EAA+B,IAA/B,KAA6C;AACnD,WAAO,UAAU,IAAI,CAAC,MAAM,CAAC,KAAD,CAAP,CAAe,GAApC;AACD,GAd+C;AAehD,EAAA,SAAS,EAAE,MAfqC;AAgBhD,EAAA,MAAM,EAAE,QAAA,CAAA,cAhBwC;AAiBhD,EAAA,QAAQ,EAAE,UAAA,CAAA;AAjBsC,CAAlD;AAoBA;;AAEG;;AACU,OAAA,CAAA,QAAA,GAAqB,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,GAArB,KAA4B;AAC5D,MAAI,KAAK,KAAK,IAAd,EAAoB,OAAO,MAAP;AAEpB,SAAO,eAAe,CAAC,OAAO,KAAR,CAAf,CAA8B,KAA9B,EAAqC,KAArC,EAA4C,IAA5C,EAAkD,GAAlD,CAAP;AACD,CAJY","sourcesContent":["import { quoteString } from \"./quote\";\nimport { Next, ToString } from \"./types\";\nimport { objectToString } from \"./object\";\nimport { functionToString } from \"./function\";\n\n/**\n * Stringify primitive values.\n */\nconst PRIMITIVE_TYPES: Record<string, ToString> = {\n  string: quoteString,\n  number: (value: number) => (Object.is(value, -0) ? \"-0\" : String(value)),\n  boolean: String,\n  symbol: (value: symbol, space: string, next: Next) => {\n    const key = Symbol.keyFor(value);\n\n    if (key !== undefined) return `Symbol.for(${next(key)})`;\n\n    // ES2018 `Symbol.description`.\n    return `Symbol(${next((value as any).description)})`;\n  },\n  bigint: (value: bigint, space: string, next: Next) => {\n    return `BigInt(${next(String(value))})`;\n  },\n  undefined: String,\n  object: objectToString,\n  function: functionToString\n};\n\n/**\n * Stringify a value recursively.\n */\nexport const toString: ToString = (value, space, next, key) => {\n  if (value === null) return \"null\";\n\n  return PRIMITIVE_TYPES[typeof value](value, space, next, key);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}