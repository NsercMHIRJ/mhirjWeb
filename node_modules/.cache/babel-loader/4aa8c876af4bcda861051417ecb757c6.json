{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar quote_1 = require(\"./quote\");\n\nvar function_1 = require(\"./function\");\n\nvar array_1 = require(\"./array\");\n/**\n * Transform an object into a string.\n */\n\n\nexports.objectToString = function (value, space, next, key) {\n  if (typeof Buffer === \"function\" && Buffer.isBuffer(value)) {\n    return \"new Buffer(\".concat(next(value.toString()), \")\");\n  } // Use the internal object string to select stringify method.\n\n\n  var toString = OBJECT_TYPES[Object.prototype.toString.call(value)];\n  return toString ? toString(value, space, next, key) : undefined;\n};\n/**\n * Stringify an object of keys and values.\n */\n\n\nvar rawObjectToString = function rawObjectToString(obj, indent, next) {\n  var eol = indent ? \"\\n\" : \"\";\n  var space = indent ? \" \" : \"\"; // Iterate over object keys and concat string together.\n\n  var values = Object.keys(obj).reduce(function (values, key) {\n    var fn = obj[key];\n    var result = next(fn, key); // Omit `undefined` object entries.\n\n    if (result === undefined) return values; // String format the value data.\n\n    var value = result.split(\"\\n\").join(\"\\n\".concat(indent)); // Skip `key` prefix for function parser.\n\n    if (function_1.USED_METHOD_KEY.has(fn)) {\n      values.push(\"\".concat(indent).concat(value));\n      return values;\n    }\n\n    values.push(\"\".concat(indent).concat(quote_1.quoteKey(key, next), \":\").concat(space).concat(value));\n    return values;\n  }, []).join(\",\".concat(eol)); // Avoid new lines in an empty object.\n\n  if (values === \"\") return \"{}\";\n  return \"{\".concat(eol).concat(values).concat(eol, \"}\");\n};\n/**\n * Stringify global variable access.\n */\n\n\nvar globalToString = function globalToString(value, space, next) {\n  return \"Function(\".concat(next(\"return this\"), \")()\");\n};\n/**\n * Convert JavaScript objects into strings.\n */\n\n\nvar OBJECT_TYPES = {\n  \"[object Array]\": array_1.arrayToString,\n  \"[object Object]\": rawObjectToString,\n  \"[object Error]\": function objectError(error, space, next) {\n    return \"new Error(\".concat(next(error.message), \")\");\n  },\n  \"[object Date]\": function objectDate(date) {\n    return \"new Date(\".concat(date.getTime(), \")\");\n  },\n  \"[object String]\": function objectString(str, space, next) {\n    return \"new String(\".concat(next(str.toString()), \")\");\n  },\n  \"[object Number]\": function objectNumber(num) {\n    return \"new Number(\".concat(num, \")\");\n  },\n  \"[object Boolean]\": function objectBoolean(bool) {\n    return \"new Boolean(\".concat(bool, \")\");\n  },\n  \"[object Set]\": function objectSet(set, space, next) {\n    return \"new Set(\".concat(next(Array.from(set)), \")\");\n  },\n  \"[object Map]\": function objectMap(map, space, next) {\n    return \"new Map(\".concat(next(Array.from(map)), \")\");\n  },\n  \"[object RegExp]\": String,\n  \"[object global]\": globalToString,\n  \"[object Window]\": globalToString\n};","map":{"version":3,"sources":["../src/object.ts"],"names":[],"mappings":"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","sourcesContent":["import { Next, ToString } from \"./types\";\nimport { quoteKey } from \"./quote\";\nimport { USED_METHOD_KEY } from \"./function\";\nimport { arrayToString } from \"./array\";\n\n/**\n * Transform an object into a string.\n */\nexport const objectToString: ToString = (value, space, next, key) => {\n  if (typeof (Buffer as unknown) === \"function\" && Buffer.isBuffer(value)) {\n    return `new Buffer(${next(value.toString())})`;\n  }\n\n  // Use the internal object string to select stringify method.\n  const toString = OBJECT_TYPES[Object.prototype.toString.call(value)];\n  return toString ? toString(value, space, next, key) : undefined;\n};\n\n/**\n * Stringify an object of keys and values.\n */\nconst rawObjectToString: ToString = (obj, indent, next) => {\n  const eol = indent ? \"\\n\" : \"\";\n  const space = indent ? \" \" : \"\";\n\n  // Iterate over object keys and concat string together.\n  const values = Object.keys(obj)\n    .reduce(\n      function(values, key) {\n        const fn = obj[key];\n        const result = next(fn, key);\n\n        // Omit `undefined` object entries.\n        if (result === undefined) return values;\n\n        // String format the value data.\n        const value = result.split(\"\\n\").join(`\\n${indent}`);\n\n        // Skip `key` prefix for function parser.\n        if (USED_METHOD_KEY.has(fn)) {\n          values.push(`${indent}${value}`);\n          return values;\n        }\n\n        values.push(`${indent}${quoteKey(key, next)}:${space}${value}`);\n        return values;\n      },\n      [] as string[]\n    )\n    .join(`,${eol}`);\n\n  // Avoid new lines in an empty object.\n  if (values === \"\") return \"{}\";\n\n  return `{${eol}${values}${eol}}`;\n};\n\n/**\n * Stringify global variable access.\n */\nconst globalToString: ToString = (value, space, next) => {\n  return `Function(${next(\"return this\")})()`;\n};\n\n/**\n * Convert JavaScript objects into strings.\n */\nconst OBJECT_TYPES: Record<string, ToString> = {\n  \"[object Array]\": arrayToString,\n  \"[object Object]\": rawObjectToString,\n  \"[object Error]\": (error: Error, space: string, next: Next) => {\n    return `new Error(${next(error.message)})`;\n  },\n  \"[object Date]\": (date: Date) => {\n    return `new Date(${date.getTime()})`;\n  },\n  \"[object String]\": (str: String, space: string, next: Next) => {\n    return `new String(${next(str.toString())})`;\n  },\n  \"[object Number]\": (num: number) => {\n    return `new Number(${num})`;\n  },\n  \"[object Boolean]\": (bool: boolean) => {\n    return `new Boolean(${bool})`;\n  },\n  \"[object Set]\": (set: Set<any>, space: string, next: Next) => {\n    return `new Set(${next(Array.from(set))})`;\n  },\n  \"[object Map]\": (map: Map<any, any>, space: string, next: Next) => {\n    return `new Map(${next(Array.from(map))})`;\n  },\n  \"[object RegExp]\": String,\n  \"[object global]\": globalToString,\n  \"[object Window]\": globalToString\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}