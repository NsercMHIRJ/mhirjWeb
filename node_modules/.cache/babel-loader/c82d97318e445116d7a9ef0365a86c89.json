{"ast":null,"code":"const fs = require('fs');\n\nconst axios = require('axios');\n\nconst {\n  stringify\n} = require('javascript-stringify');\n\nclass ChartJsImage {\n  constructor(apiKey, accountId) {\n    this.apiKey = apiKey;\n    this.accountId = accountId;\n    this.host = 'quickchart.io';\n    this.protocol = 'https';\n    this.baseUrl = `${this.protocol}://${this.host}`;\n    this.chart = undefined;\n    this.width = 500;\n    this.height = 300;\n    this.devicePixelRatio = 1.0;\n    this.backgroundColor = '#ffffff';\n    this.format = 'png';\n  }\n\n  setConfig(chartConfig) {\n    this.chart = stringify(chartConfig);\n    return this;\n  }\n\n  setWidth(width) {\n    this.width = parseInt(width, 10);\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = parseInt(height, 10);\n    return this;\n  }\n\n  setBackgroundColor(color) {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  setDevicePixelRatio(ratio) {\n    this.devicePixelRatio = parseFloat(ratio);\n    return this;\n  }\n\n  setFormat(fmt) {\n    this.format = fmt;\n    return this;\n  }\n\n  isValid() {\n    if (!this.chart) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getUrl() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const ret = new URL(`${this.baseUrl}/chart`);\n    ret.searchParams.append('c', this.chart);\n    ret.searchParams.append('w', this.width);\n    ret.searchParams.append('h', this.height);\n\n    if (this.devicePixelRatio !== 1.0) {\n      ret.searchParams.append('devicePixelRatio', this.devicePixelRatio);\n    }\n\n    if (this.backgroundColor !== 1.0) {\n      ret.searchParams.append('bkg', this.backgroundColor);\n    }\n\n    if (this.format !== 1.0) {\n      ret.searchParams.append('f', this.format);\n    }\n\n    return ret.href;\n  }\n\n  getPostData() {\n    const {\n      width,\n      height,\n      chart,\n      format,\n      backgroundColor,\n      devicePixelRatio\n    } = this;\n    const postData = {\n      width,\n      height,\n      chart\n    };\n\n    if (format) {\n      postData.format = format;\n    }\n\n    if (backgroundColor) {\n      postData.backgroundColor = backgroundColor;\n    }\n\n    if (devicePixelRatio) {\n      postData.devicePixelRatio = devicePixelRatio;\n    }\n\n    return postData;\n  }\n\n  async getShortUrl() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await axios.post('https://quickchart.io/chart/create', this.getPostData());\n\n    if (resp.status !== 200) {\n      throw `Bad response code ${resp.status} from chart shorturl endpoint`;\n    } else if (!resp.data.success) {\n      throw 'Received failure response from chart shorturl endpoint';\n    } else {\n      return resp.data.url;\n    }\n  }\n\n  async toBinary() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await axios.post('https://quickchart.io/chart', this.getPostData(), {\n      responseType: 'arraybuffer'\n    });\n\n    if (resp.status !== 200) {\n      throw `Bad response code ${resp.status} from chart shorturl endpoint`;\n    }\n\n    return Buffer.from(resp.data, 'binary');\n  }\n\n  async toDataUrl() {\n    const buf = await this.toBinary();\n    const b64buf = buf.toString('base64');\n    return `data:image/png;base64,${b64buf}`;\n  }\n\n  async toFile(pathOrDescriptor) {\n    const buf = await this.toBinary();\n    fs.writeFileSync(pathOrDescriptor, buf);\n  }\n\n}\n\nmodule.exports = ChartJsImage;","map":{"version":3,"sources":["/Users/kanu/Desktop/MHIRJTEST/mhirjWeb/node_modules/chartjs-to-image/index.js"],"names":["fs","require","axios","stringify","ChartJsImage","constructor","apiKey","accountId","host","protocol","baseUrl","chart","undefined","width","height","devicePixelRatio","backgroundColor","format","setConfig","chartConfig","setWidth","parseInt","setHeight","setBackgroundColor","color","setDevicePixelRatio","ratio","parseFloat","setFormat","fmt","isValid","getUrl","Error","ret","URL","searchParams","append","href","getPostData","postData","getShortUrl","resp","post","status","data","success","url","toBinary","responseType","Buffer","from","toDataUrl","buf","b64buf","toString","toFile","pathOrDescriptor","writeFileSync","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\n\nconst axios = require('axios');\nconst { stringify } = require('javascript-stringify');\n\nclass ChartJsImage {\n  constructor(apiKey, accountId) {\n    this.apiKey = apiKey;\n    this.accountId = accountId;\n\n    this.host = 'quickchart.io';\n    this.protocol = 'https';\n    this.baseUrl = `${this.protocol}://${this.host}`;\n\n    this.chart = undefined;\n    this.width = 500;\n    this.height = 300;\n    this.devicePixelRatio = 1.0;\n    this.backgroundColor = '#ffffff';\n    this.format = 'png';\n  }\n\n  setConfig(chartConfig) {\n    this.chart = stringify(chartConfig);\n    return this;\n  }\n\n  setWidth(width) {\n    this.width = parseInt(width, 10);\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = parseInt(height, 10);\n    return this;\n  }\n\n  setBackgroundColor(color) {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  setDevicePixelRatio(ratio) {\n    this.devicePixelRatio = parseFloat(ratio);\n    return this;\n  }\n\n  setFormat(fmt) {\n    this.format = fmt;\n    return this;\n  }\n\n  isValid() {\n    if (!this.chart) {\n      return false;\n    }\n    return true;\n  }\n\n  getUrl() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n    const ret = new URL(`${this.baseUrl}/chart`);\n    ret.searchParams.append('c', this.chart);\n    ret.searchParams.append('w', this.width);\n    ret.searchParams.append('h', this.height);\n    if (this.devicePixelRatio !== 1.0) {\n      ret.searchParams.append('devicePixelRatio', this.devicePixelRatio);\n    }\n    if (this.backgroundColor !== 1.0) {\n      ret.searchParams.append('bkg', this.backgroundColor);\n    }\n    if (this.format !== 1.0) {\n      ret.searchParams.append('f', this.format);\n    }\n    return ret.href;\n  }\n\n  getPostData() {\n    const { width, height, chart, format, backgroundColor, devicePixelRatio } = this;\n    const postData = {\n      width,\n      height,\n      chart,\n    };\n    if (format) {\n      postData.format = format;\n    }\n    if (backgroundColor) {\n      postData.backgroundColor = backgroundColor;\n    }\n    if (devicePixelRatio) {\n      postData.devicePixelRatio = devicePixelRatio;\n    }\n    return postData;\n  }\n\n  async getShortUrl() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await axios.post('https://quickchart.io/chart/create', this.getPostData());\n    if (resp.status !== 200) {\n      throw `Bad response code ${resp.status} from chart shorturl endpoint`;\n    } else if (!resp.data.success) {\n      throw 'Received failure response from chart shorturl endpoint';\n    } else {\n      return resp.data.url;\n    }\n  }\n\n  async toBinary() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await axios.post('https://quickchart.io/chart', this.getPostData(), {\n      responseType: 'arraybuffer',\n    });\n    if (resp.status !== 200) {\n      throw `Bad response code ${resp.status} from chart shorturl endpoint`;\n    }\n    return Buffer.from(resp.data, 'binary');\n  }\n\n  async toDataUrl() {\n    const buf = await this.toBinary();\n    const b64buf = buf.toString('base64');\n    return `data:image/png;base64,${b64buf}`;\n  }\n\n  async toFile(pathOrDescriptor) {\n    const buf = await this.toBinary();\n    fs.writeFileSync(pathOrDescriptor, buf);\n  }\n}\n\nmodule.exports = ChartJsImage;\n"]},"metadata":{},"sourceType":"script"}