{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/kanu/Desktop/MHIRJTEST/mhirjWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kanu/Desktop/MHIRJTEST/mhirjWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kanu/Desktop/MHIRJTEST/mhirjWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kanu/Desktop/MHIRJTEST/mhirjWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar fs = require('fs');\n\nvar axios = require('axios');\n\nvar _require = require('javascript-stringify'),\n    stringify = _require.stringify;\n\nvar ChartJsImage = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ChartJsImage(apiKey, accountId) {\n    _classCallCheck(this, ChartJsImage);\n\n    this.apiKey = apiKey;\n    this.accountId = accountId;\n    this.host = 'quickchart.io';\n    this.protocol = 'https';\n    this.baseUrl = \"\".concat(this.protocol, \"://\").concat(this.host);\n    this.chart = undefined;\n    this.width = 500;\n    this.height = 300;\n    this.devicePixelRatio = 1.0;\n    this.backgroundColor = '#ffffff';\n    this.format = 'png';\n  }\n\n  _createClass(ChartJsImage, [{\n    key: \"setConfig\",\n    value: function setConfig(chartConfig) {\n      this.chart = stringify(chartConfig);\n      return this;\n    }\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      this.width = parseInt(width, 10);\n      return this;\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      this.height = parseInt(height, 10);\n      return this;\n    }\n  }, {\n    key: \"setBackgroundColor\",\n    value: function setBackgroundColor(color) {\n      this.backgroundColor = color;\n      return this;\n    }\n  }, {\n    key: \"setDevicePixelRatio\",\n    value: function setDevicePixelRatio(ratio) {\n      this.devicePixelRatio = parseFloat(ratio);\n      return this;\n    }\n  }, {\n    key: \"setFormat\",\n    value: function setFormat(fmt) {\n      this.format = fmt;\n      return this;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      if (!this.chart) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      if (!this.isValid()) {\n        throw new Error('You must call setConfig before getUrl');\n      }\n\n      var ret = new URL(\"\".concat(this.baseUrl, \"/chart\"));\n      ret.searchParams.append('c', this.chart);\n      ret.searchParams.append('w', this.width);\n      ret.searchParams.append('h', this.height);\n\n      if (this.devicePixelRatio !== 1.0) {\n        ret.searchParams.append('devicePixelRatio', this.devicePixelRatio);\n      }\n\n      if (this.backgroundColor !== 1.0) {\n        ret.searchParams.append('bkg', this.backgroundColor);\n      }\n\n      if (this.format !== 1.0) {\n        ret.searchParams.append('f', this.format);\n      }\n\n      return ret.href;\n    }\n  }, {\n    key: \"getPostData\",\n    value: function getPostData() {\n      var width = this.width,\n          height = this.height,\n          chart = this.chart,\n          format = this.format,\n          backgroundColor = this.backgroundColor,\n          devicePixelRatio = this.devicePixelRatio;\n      var postData = {\n        width: width,\n        height: height,\n        chart: chart\n      };\n\n      if (format) {\n        postData.format = format;\n      }\n\n      if (backgroundColor) {\n        postData.backgroundColor = backgroundColor;\n      }\n\n      if (devicePixelRatio) {\n        postData.devicePixelRatio = devicePixelRatio;\n      }\n\n      return postData;\n    }\n  }, {\n    key: \"getShortUrl\",\n    value: function () {\n      var _getShortUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.isValid()) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('You must call setConfig before getUrl');\n\n              case 2:\n                _context.next = 4;\n                return axios.post('https://quickchart.io/chart/create', this.getPostData());\n\n              case 4:\n                resp = _context.sent;\n\n                if (!(resp.status !== 200)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw \"Bad response code \".concat(resp.status, \" from chart shorturl endpoint\");\n\n              case 9:\n                if (resp.data.success) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw 'Received failure response from chart shorturl endpoint';\n\n              case 13:\n                return _context.abrupt(\"return\", resp.data.url);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getShortUrl() {\n        return _getShortUrl.apply(this, arguments);\n      }\n\n      return getShortUrl;\n    }()\n  }, {\n    key: \"toBinary\",\n    value: function () {\n      var _toBinary = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.isValid()) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error('You must call setConfig before getUrl');\n\n              case 2:\n                _context2.next = 4;\n                return axios.post('https://quickchart.io/chart', this.getPostData(), {\n                  responseType: 'arraybuffer'\n                });\n\n              case 4:\n                resp = _context2.sent;\n\n                if (!(resp.status !== 200)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw \"Bad response code \".concat(resp.status, \" from chart shorturl endpoint\");\n\n              case 7:\n                return _context2.abrupt(\"return\", Buffer.from(resp.data, 'binary'));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function toBinary() {\n        return _toBinary.apply(this, arguments);\n      }\n\n      return toBinary;\n    }()\n  }, {\n    key: \"toDataUrl\",\n    value: function () {\n      var _toDataUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var buf, b64buf;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.toBinary();\n\n              case 2:\n                buf = _context3.sent;\n                b64buf = buf.toString('base64');\n                return _context3.abrupt(\"return\", \"data:image/png;base64,\".concat(b64buf));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function toDataUrl() {\n        return _toDataUrl.apply(this, arguments);\n      }\n\n      return toDataUrl;\n    }()\n  }, {\n    key: \"toFile\",\n    value: function () {\n      var _toFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(pathOrDescriptor) {\n        var buf;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.toBinary();\n\n              case 2:\n                buf = _context4.sent;\n                fs.writeFileSync(pathOrDescriptor, buf);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function toFile(_x) {\n        return _toFile.apply(this, arguments);\n      }\n\n      return toFile;\n    }()\n  }]);\n\n  return ChartJsImage;\n}();\n\nmodule.exports = ChartJsImage;","map":{"version":3,"sources":["/Users/kanu/Desktop/MHIRJTEST/mhirjWeb/node_modules/chartjs-to-image/index.js"],"names":["fs","require","axios","stringify","ChartJsImage","apiKey","accountId","host","protocol","baseUrl","chart","undefined","width","height","devicePixelRatio","backgroundColor","format","chartConfig","parseInt","color","ratio","parseFloat","fmt","isValid","Error","ret","URL","searchParams","append","href","postData","post","getPostData","resp","status","data","success","url","responseType","Buffer","from","toBinary","buf","b64buf","toString","pathOrDescriptor","writeFileSync","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\n\nconst axios = require('axios');\nconst { stringify } = require('javascript-stringify');\n\nclass ChartJsImage {\n  constructor(apiKey, accountId) {\n    this.apiKey = apiKey;\n    this.accountId = accountId;\n\n    this.host = 'quickchart.io';\n    this.protocol = 'https';\n    this.baseUrl = `${this.protocol}://${this.host}`;\n\n    this.chart = undefined;\n    this.width = 500;\n    this.height = 300;\n    this.devicePixelRatio = 1.0;\n    this.backgroundColor = '#ffffff';\n    this.format = 'png';\n  }\n\n  setConfig(chartConfig) {\n    this.chart = stringify(chartConfig);\n    return this;\n  }\n\n  setWidth(width) {\n    this.width = parseInt(width, 10);\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = parseInt(height, 10);\n    return this;\n  }\n\n  setBackgroundColor(color) {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  setDevicePixelRatio(ratio) {\n    this.devicePixelRatio = parseFloat(ratio);\n    return this;\n  }\n\n  setFormat(fmt) {\n    this.format = fmt;\n    return this;\n  }\n\n  isValid() {\n    if (!this.chart) {\n      return false;\n    }\n    return true;\n  }\n\n  getUrl() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n    const ret = new URL(`${this.baseUrl}/chart`);\n    ret.searchParams.append('c', this.chart);\n    ret.searchParams.append('w', this.width);\n    ret.searchParams.append('h', this.height);\n    if (this.devicePixelRatio !== 1.0) {\n      ret.searchParams.append('devicePixelRatio', this.devicePixelRatio);\n    }\n    if (this.backgroundColor !== 1.0) {\n      ret.searchParams.append('bkg', this.backgroundColor);\n    }\n    if (this.format !== 1.0) {\n      ret.searchParams.append('f', this.format);\n    }\n    return ret.href;\n  }\n\n  getPostData() {\n    const { width, height, chart, format, backgroundColor, devicePixelRatio } = this;\n    const postData = {\n      width,\n      height,\n      chart,\n    };\n    if (format) {\n      postData.format = format;\n    }\n    if (backgroundColor) {\n      postData.backgroundColor = backgroundColor;\n    }\n    if (devicePixelRatio) {\n      postData.devicePixelRatio = devicePixelRatio;\n    }\n    return postData;\n  }\n\n  async getShortUrl() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await axios.post('https://quickchart.io/chart/create', this.getPostData());\n    if (resp.status !== 200) {\n      throw `Bad response code ${resp.status} from chart shorturl endpoint`;\n    } else if (!resp.data.success) {\n      throw 'Received failure response from chart shorturl endpoint';\n    } else {\n      return resp.data.url;\n    }\n  }\n\n  async toBinary() {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await axios.post('https://quickchart.io/chart', this.getPostData(), {\n      responseType: 'arraybuffer',\n    });\n    if (resp.status !== 200) {\n      throw `Bad response code ${resp.status} from chart shorturl endpoint`;\n    }\n    return Buffer.from(resp.data, 'binary');\n  }\n\n  async toDataUrl() {\n    const buf = await this.toBinary();\n    const b64buf = buf.toString('base64');\n    return `data:image/png;base64,${b64buf}`;\n  }\n\n  async toFile(pathOrDescriptor) {\n    const buf = await this.toBinary();\n    fs.writeFileSync(pathOrDescriptor, buf);\n  }\n}\n\nmodule.exports = ChartJsImage;\n"]},"metadata":{},"sourceType":"script"}